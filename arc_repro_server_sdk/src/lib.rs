//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: matchit::Router<u32>,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    s0: alloc::sync::Arc<arc_repro::SharedDep>,
}
pub async fn build_application_state() -> crate::ApplicationState {
    let v0 = arc_repro::build_shared_dep();
    crate::ApplicationState { s0: v0 }
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    let server_state = std::sync::Arc::new(ServerState {
        router: build_router(),
        application_state,
    });
    server_builder.serve(route_request, server_state)
}
fn build_router() -> matchit::Router<u32> {
    let mut router = matchit::Router::new();
    router.insert("/api/ping", 0u32).unwrap();
    router
}
async fn route_request(
    request: http::Request<hyper::body::Incoming>,
    server_state: std::sync::Arc<ServerState>,
) -> pavex::response::Response {
    let (request_head, request_body) = request.into_parts();
    #[allow(unused)]
    let request_body = pavex::request::body::RawIncomingBody::from(request_body);
    let request_head: pavex::request::RequestHead = request_head.into();
    let matched_route = match server_state.router.at(&request_head.uri.path()) {
        Ok(m) => m,
        Err(_) => {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::route::MatchedRouteTemplate::new(
                "*",
            );
            return route_1::middleware_0(
                    &allowed_methods,
                    matched_route_template,
                    server_state.application_state.s0.clone(),
                    &request_head,
                )
                .await;
        }
    };
    let route_id = matched_route.value;
    #[allow(unused)]
    let url_params: pavex::request::route::RawRouteParams<'_, '_> = matched_route
        .params
        .into();
    match route_id {
        0u32 => {
            let matched_route_template = pavex::request::route::MatchedRouteTemplate::new(
                "/api/ping",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_0::middleware_0(
                            matched_route_template,
                            server_state.application_state.s0.clone(),
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_1::middleware_0(
                            &allowed_methods,
                            matched_route_template,
                            server_state.application_state.s0.clone(),
                            &request_head,
                        )
                        .await
                }
            }
        }
        i => unreachable!("Unknown route id: {}", i),
    }
}
pub mod route_0 {
    pub async fn middleware_0(
        v0: pavex::request::route::MatchedRouteTemplate,
        v1: alloc::sync::Arc<arc_repro::SharedDep>,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = <alloc::sync::Arc<
            arc_repro::SharedDep,
        > as core::clone::Clone>::clone(&v1);
        let v4 = crate::route_0::Next0 {
            s_0: v3,
            s_1: v0,
            s_2: v2,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = arc_repro::MiddlewareDep::new(v1);
        arc_repro::middleware(&v6, v5).await
    }
    pub async fn middleware_1(
        v0: pavex::request::route::MatchedRouteTemplate,
        v1: alloc::sync::Arc<arc_repro::SharedDep>,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = arc_repro::telemetry::RootSpan::new(v2, v0);
        let v4 = crate::route_0::Next1 {
            s_0: v1,
            next: handler,
        };
        let v5 = pavex::middleware::Next::new(v4);
        arc_repro::telemetry::logger(v5, v3).await
    }
    pub async fn handler(
        v0: alloc::sync::Arc<arc_repro::SharedDep>,
    ) -> pavex::response::Response {
        let v1 = arc_repro::routes::status::ping(v0);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v1)
    }
    pub struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: alloc::sync::Arc<arc_repro::SharedDep>,
        s_1: pavex::request::route::MatchedRouteTemplate,
        s_2: &'a pavex::request::RequestHead,
        next: fn(
            pavex::request::route::MatchedRouteTemplate,
            alloc::sync::Arc<arc_repro::SharedDep>,
            &'a pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0, self.s_2)
        }
    }
    pub struct Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: alloc::sync::Arc<arc_repro::SharedDep>,
        next: fn(alloc::sync::Arc<arc_repro::SharedDep>) -> T,
    }
    impl<T> std::future::IntoFuture for Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_1 {
    pub async fn middleware_0(
        v0: &pavex::router::AllowedMethods,
        v1: pavex::request::route::MatchedRouteTemplate,
        v2: alloc::sync::Arc<arc_repro::SharedDep>,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_1::Next0 {
            s_0: v0,
            s_1: v1,
            s_2: v3,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = arc_repro::MiddlewareDep::new(v2);
        arc_repro::middleware(&v6, v5).await
    }
    pub async fn middleware_1(
        v0: pavex::request::route::MatchedRouteTemplate,
        v1: &pavex::router::AllowedMethods,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = arc_repro::telemetry::RootSpan::new(v2, v0);
        let v4 = crate::route_1::Next1 {
            s_0: v1,
            next: handler,
        };
        let v5 = pavex::middleware::Next::new(v4);
        arc_repro::telemetry::logger(v5, v3).await
    }
    pub async fn handler(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::route::MatchedRouteTemplate,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            pavex::request::route::MatchedRouteTemplate,
            &'a pavex::router::AllowedMethods,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0, self.s_2)
        }
    }
    pub struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
